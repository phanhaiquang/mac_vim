"let user_autocmd = {}
filetype indent plugin on
syntax on

" this is different behavior in VIM and NEOVIM for autocmd
" without this, some keymapping does not work at 1st buffer (it works with 2nd
" buffer)
if has('nvim')
  set shortmess-=F
endif

" need to assign value for "leader" key before loadding plugin
" because the setting impacks to the plugin configuration for 1st buffer
let mapleader = ","
let g:user_emmet_leader_key = ',,'

" used in "Plug" command, to make sure the plugin is loaded only with the
" condition
function! Cond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction

" check if plugin_name was in installed plugins to load the config_path file
" because the config_path may contain some "mapping" to enable the plugin,
" so that mapping always work in the case that plugins was installed even if
" it is not in the load condition 
function! LoadConfig(plugin_name, config_path)
  if len(filter(values(g:plugs), 'v:val.dir =~ "' . a:plugin_name . '"'))
    exec ":so " . a:config_path
  endif
endfunction

" the directy the Plug should put plugins into
function! PluggedDir()
  if exists('g:vscode')
    return '~/.vim/vscode/plugged'
  elseif has('nvim')
    return '~/.vim/nvim/plugged'
  else
    return '~/.vim/plugged'
  endif
endfunction

" is inside VSCode ?
function! IsVscode()
  return exists('g:vscode')
endfunction

call plug#begin(PluggedDir())
  Plug 'mattn/emmet-vim', {'for': ['html', 'eruby', 'erb']}
  Plug 'tpope/vim-sensible' "default setup for everyone
  Plug 'tpope/vim-sleuth'  "auto adjust shiftwidth and expandtab
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'preservim/nerdcommenter' "make comments easier

  if IsVscode()
    " ------------ Plugins for VSCode ------------
    Plug 'easymotion/vim-easymotion', Cond(!exists('g:vscode'))
    Plug 'asvetliakov/vim-easymotion', Cond(exists('g:vscode'), { 'as': 'vsc-easymotion' })
  else
    " ------------ Plugins for NEOVIM and VIM ------------
    Plug 'kien/rainbow_parentheses.vim' "rainbow parentheses
    Plug 'dbakker/vim-projectroot'
    Plug 'tpope/vim-haml', {'for': ['haml', 'sass', 'scss']}
    Plug 'tpope/vim-bundler', {'on': ['Bundle']}
    Plug 'groenewege/vim-less', {'for': ['less']}
    Plug 'cakebaker/scss-syntax.vim', {'for': ['scss']}
    Plug 'tpope/vim-dispatch', {'on': ['Make', 'Copen', 'Dispatch', 'Focus'], 'branch': 'job'}
    Plug 'ecomba/vim-ruby-refactoring', {'on': ['RExtractMethod', 'RExtractLocalVariable']}
    Plug 'tpope/vim-rails', {'for': ['ruby', 'slim', 'erb', 'eruby']}
    Plug 'janko-m/vim-test', {'on': ['TestNearest', 'TestLast', 'TestFile']}
    Plug 'jpalardy/vim-slime', {'on': ['SlimeConfig', 'SlimeSend']}
    "Plug 'slim-template/vim-slim', {'for': ['slim']}
    Plug 'vim-scripts/Align', {'on': 'Align'}
    Plug 'nachumk/systemverilog.vim', {'for': ['verilog', 'systemverilog']}
    Plug 'AndrewRadev/splitjoin.vim', {'for': ['ruby']}
    Plug 'vim-ruby/vim-ruby', {'for': ['ruby', 'slim', 'erb']}
    Plug 'tpope/vim-endwise'          "match structure by language syntax
    Plug 'alvan/vim-closetag'         "close HTML tag
    Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
    Plug 'SirVer/ultisnips', {'for': ['snippets', 'ruby', 'javascript', 'scss', 'html', 'erb', 'css', 'go', 'python', 'perl', 'rust', 'swift', 'typescript', 'verilog', 'systemverilog', 'vhdl', 'yaml']}
    Plug 'honza/vim-snippets', {'for': ['ruby', 'python', 'rust', 'dart']}
    Plug 'vim-scripts/SyntaxComplete', {'for': ['ruby', 'python', 'rust', 'dart']}
    Plug 'pocke/rbs.vim', {'for': ['rbs']}

    "" Flutter : coverred by coc-flutter
    "Plug 'thosakwe/vim-flutter', {'for': ['flutter', 'dart']}
    "Plug 'dart-lang/dart-vim-plugin', {'for': ['flutter', 'dart']}

    Plug 'isRuslan/vim-es6', {'for': ['javascript', 'jsx', 'javascript.jsx']}

    " has error when def/end , or when undo
    Plug 'jiangmiao/auto-pairs', {'for': ['ruby', 'javascript', 'css', 'scss']}

    " LSP does not support all features, still need ALE
    Plug 'w0rp/ale', {'for': ['ruby', 'javascript', 'html', 'eruby']}

    if has('nvim')
      Plug 'mhinz/vim-startify' " project management
      Plug 'mhinz/vim-janah' "colorstheme for neovim
      "Plug 'joshdick/onedark.vim' "colorstheme for neovim

      Plug 'github/copilot.vim' "copilot.vim is a Vim plugin that provides a more convenient way to navigate through your files and directories
      Plug 'nvim-lua/plenary.nvim'

      Plug 'nvim-lua/completion-nvim'

      " show airline / lightline / status line at bottom of buffer
      Plug 'vim-airline/vim-airline'
      Plug 'vim-airline/vim-airline-themes'

      " replace ctrlp by telescope
      "Plug 'ctrlpvim/ctrlp.vim' "ctrlp.vim is a Vim plugin that provides a more convenient way to navigate through your files and directories
      Plug 'nvim-telescope/telescope.nvim' " search file, definitions
      Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
      
      " LSP: Language Server Protocol --> look like coc.nvim already cover these ?
      Plug 'neovim/nvim-lspconfig'
      Plug 'glepnir/lspsaga.nvim'
      Plug 'neoclide/coc.nvim', {'branch': 'release'} "make nvim as IDE
      
      " coc.nvim coverred these features ?
      "Plug 'williamboman/nvim-lsp-installer'
      "Plug 'prabirshrestha/vim-lsp'

      " vim-lsp coverred these features ?
      "Plug 'autozimu/LanguageClient-neovim', { 'branch': 'next', 'do': 'bash install.sh' } "language client, code action?
      "Plug 'junegunn/fzf' "multi-entry selection UI
    else
      Plug 'mileszs/ack.vim', {'on': 'Ack'}
      Plug 'mhartington/oceanic-next' "colorstheme
      Plug 'Yggdroot/indentLine'
      Plug 'vim-scripts/cscope.vim'
      Plug 'itchyny/lightline.vim'
      Plug 'ctrlpvim/ctrlp.vim', {'do': ':CtrpInstall'}
      Plug 'natebosch/vim-lsc'
      Plug 'natebosch/vim-lsc-dart'
      Plug 'ervandew/supertab', {'for': ['ruby', 'python', 'rust', 'dart']}

      " do not work at Vietnam country
      "Plug 'tom-doerr/vim_codex'

      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    end
  end
call plug#end()

if !has("nvim")
  set clipboard=autoselect
endif

map <D-v> :set paste<CR>:normal <D-v>:normal paste!

function! LoadConfigs()
  call LoadConfig("vim-projectroot", "~/.vim/mysetting/project_root.vim")
  call LoadConfig("oceanic-next", "~/.vim/mysetting/oceanic-next.vim")
  call LoadConfig("vim-janah", "~/.vim/mysetting/janah.vim")
  call LoadConfig("onedark", "~/.vim/mysetting/onedark.vim")
  call LoadConfig("ctrlp", "~/.vim/mysetting/ctrlp.vim")
  call LoadConfig("Align", "~/.vim/mysetting/align.vim")
  call LoadConfig("vim-test", "~/.vim/mysetting/vim-test.vim")
  call LoadConfig("deoplete", "~/.vim/mysetting/deoplete.vim")
  call LoadConfig("telescope", "~/.vim/mysetting/telescope.vim")
  call LoadConfig("nvim-lspconfig", "~/.vim/mysetting/lspconfig.vim")
  call LoadConfig("vim-lsp", "~/.vim/mysetting/lsp.vim")
  call LoadConfig("lspsaga", "~/.vim/mysetting/lspsaga.vim")
  call LoadConfig("vim-rails", "~/.vim/mysetting/rails.vim")
  call LoadConfig("vim-surround", "~/.vim/mysetting/surround.vim")
  call LoadConfig("ultisnips", "~/.vim/mysetting/ultisnips.vim")
  call LoadConfig("supertab", "~/.vim/mysetting/supertab.vim")
  call LoadConfig("vim-es6", "~/.vim/mysetting/javascript.vim")
  call LoadConfig("auto-pairs", "~/.vim/mysetting/auto-pairs.vim")
  call LoadConfig("emmet", "~/.vim/mysetting/emmet.vim")
  call LoadConfig("nerdcommenter", "~/.vim/mysetting/nerdcommenter.vim")
  call LoadConfig("vim-commentary", "~/.vim/mysetting/commentary.vim")
  call LoadConfig("rainbow", "~/.vim/mysetting/rainbow.vim")
  call LoadConfig("slime", "~/.vim/mysetting/slime.vim")
  call LoadConfig("indentLine", "~/.vim/mysetting/indentLine.vim")
  call LoadConfig("snippets", "~/.vim/mysetting/snippets.vim")
  call LoadConfig("ale", "~/.vim/mysetting/ale.vim")
  call LoadConfig("splitjoin", "~/.vim/mysetting/splitjoin.vim")
  call LoadConfig("fugitive", "~/.vim/mysetting/fugitive.vim")
  call LoadConfig("nerdtree", "~/.vim/mysetting/nerdtree.vim")
  call LoadConfig("vim-flutter", "~/.vim/mysetting/flutter.vim")
  call LoadConfig("vim-startify", "~/.vim/mysetting/startify.vim")
  call LoadConfig("ack.vim", "~/.vim/mysetting/ack.vim")
  call LoadConfig("cscope.vim", "~/.vim/mysetting/cscope.vim")
  call LoadConfig("LanguageClient", "~/.vim/mysetting/language-client.vim")
  call LoadConfig("treesitter", "~/.vim/mysetting/treesitter.vim")
  call LoadConfig("pum.vim", "~/.vim/mysetting/pum.vim")
  call LoadConfig("vim-airline", "~/.vim/mysetting/airline.vim")
  call LoadConfig("completion-nvim", "~/.vim/mysetting/completion-nvim.vim")

  " put this at the end to make sure all the mapping is priority for COC
  call LoadConfig("ddc.vim", "~/.vim/mysetting/ddc.vim")
  call LoadConfig("coc.nvim", "~/.vim/mysetting/coc.vim")

  if IsVscode()
    call LoadConfig(".", "~/.vim/mysetting/vscode.vim")
  else
    " these settings does not depend on plugin so that it must be controlled
    " by if/else
    call LoadConfig(".", "~/.vim/mysetting/fold.vim")
    call LoadConfig(".", "~/.vim/mysetting/unicode.vim")
    call LoadConfig(".", "~/.vim/mysetting/web.vim")
    call LoadConfig(".", "~/.vim/mysetting/function.vim")
    call LoadConfig(".", "~/.vim/mysetting/refresh.vim")
    call LoadConfig(".", "~/.vim/mysetting/flow.vim")
    call LoadConfig(".", "~/.vim/mysetting/bookmark.vim")
    call LoadConfig(".", "~/.vim/mysetting/ansiesc.vim")
    call LoadConfig(".", "~/.vim/mysetting/moveline.vim")
  end

  call LoadConfig(".", "~/.vim/mysetting/custom.vim")  "custom is highest priority
endfunction
:autocmd! VimEnter * call LoadConfigs()
